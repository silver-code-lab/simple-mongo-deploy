name: Deploy to EC2 (docker-compose)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy (e.g., a commit SHA from Repo 1). Leave empty to auto-try current SHA then fallback to latest."
        required: false
        default: ""
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write SSH private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          test -n "$SSH_PRIVATE_KEY"
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem

      - name: Copy compose file to server
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/key.pem \
            docker-compose.prod.yml \
            ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/docker-compose.prod.yml

      - name: Install Docker on EC2 (official Docker repo â€“ idempotent)
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/key.pem ubuntu@${{ secrets.EC2_HOST }} <<'SSH'
          set -e
          if ! command -v docker >/dev/null 2>&1; then
            curl -fsSL https://get.docker.com | sh
            sudo usermod -aG docker ubuntu
          fi
          docker --version
          docker compose version || true
          SSH

      - name: Remote deploy (pin to image tag, fallback to latest)
        env:
          INPUT_TAG: ${{ inputs.image_tag }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/key.pem ubuntu@${{ secrets.EC2_HOST }} <<'SSH'
          set -euo pipefail
          FILE=/home/ubuntu/docker-compose.prod.yml
          IMG_BASE="artium777/simple-mongo-app"

          # 1) Choose desired tag:
          TAG_INPUT='${INPUT_TAG}'
          TAG_CURRENT_SHA='${{ github.sha }}'

          # Prefer manual input; else try current SHA; else blank (will fallback)
          TAG="$TAG_INPUT"
          if [ -z "$TAG" ]; then TAG="$TAG_CURRENT_SHA"; fi

          echo "Desired image tag: '$TAG' (empty means fallback to latest)"

          # 2) Probe if tag exists (pull only the app image to test):
          if [ -n "$TAG" ]; then
            if docker pull "$IMG_BASE:$TAG"; then
              echo "Tag '$TAG' exists."
            else
              echo "Tag '$TAG' not found; falling back to 'latest'."
              TAG="latest"
              docker pull "$IMG_BASE:latest"
            fi
          else
            TAG="latest"
            docker pull "$IMG_BASE:latest"
          fi

          # 3) Pass resolved tag into compose as env var for substitution
          export GIT_SHA="$TAG"

          # 4) Deploy
          docker compose -f "$FILE" pull
          docker compose -f "$FILE" up -d
          docker compose -f "$FILE" ps
          curl -fsS http://127.0.0.1:8000/health || true
          SSH
